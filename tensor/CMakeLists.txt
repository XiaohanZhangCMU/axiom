find_package(Boost 1.66.0 COMPONENTS python3 thread system REQUIRED)

set(CPU_ONLY "On")
find_package(CUDA)
if (APPLE)
    # message("Turn off CUDA on OSX.")
    add_definitions(-DCPU_ONLY)
    set(CPU_ONLY "On")
else()
    if(CUDA_FOUND)
        option (CUDA_ENFORCE_HOST_COMPILER "Force nvcc to use the same compiler used to compile .c(pp) files insted of gcc/g++" ON)
        if(${HostName} MATCHES "sh-*")
            # message("On Sherlock2.0. Use code=sm_61")
            set(CUDA_ARCH -gencode;arch=compute_61,code=sm_61)
        else()
            # message("On Rice or Sherlock1.0. Use code=sm_35")
            set(CUDA_ARCH -gencode;arch=compute_35,code=sm_35)
        endif()

        set(CUDA_NVCC_FLAGS "${CUDA_NVCC_FLAGS} ${CUDA_ARCH} -std=c++11")
        file (GLOB AXIOM_CUDA_SRCS "src/*.cu" "src/tensor.cpp")
        cuda_add_library(cuda_axiom SHARED ${AXIOM_CUDA_SRCS})

        target_link_libraries(cuda_axiom cublas)
        set_target_properties(cuda_axiom PROPERTIES LIBRARY_OUTPUT_DIRECTORY "../lib")
    else()
        # message("Unable to find CUDA.")
        add_definitions(-DCPU_ONLY)
        set(CPU_ONLY "On")
    endif()
endif()

if (CUDA_FOUND)
    if(NOT CPU_ONLY)
        target_link_libraries(axiomlib cuda_axiom cublas )
    endif()
endif()

# These lines are machine dependent.
if("${HostName}" MATCHES "rice*" )
    message("On rice: add self-defined blas and cuda library")
    include_directories(${include_directories} /usr/local/opt/openblas/include)
    link_directories   (${link_directories} ${PYTHON_LIBRARY} /usr/local/opt/openblas/lib /usr/local/cuda/lib64 ${BOOST_LIBRARIES_DIR})
endif()
if(APPLE)
    # message("On OSX: add self-defined blas library")
    include_directories(${include_directories} /usr/local/opt/openblas/include)
    link_directories   (${link_directories} ${PYTHON_LIBRARY} /usr/local/opt/openblas/lib ${BOOST_LIBRARIES_DIR} )
endif()

get_filename_component(target ${CMAKE_CURRENT_SOURCE_DIR} NAME)   # put current folder name as target name
include_directories(${include_directories} "include" "../pybind11/include/")
message("${include_directories}")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-literal-suffix -Wno-unused-but-set-variable -Wno-misleading-indentation -Wno-format-overflow -Wno-unused-variable -Wno-parentheses -Wno-restrict -Wno-class-memaccess")
file (GLOB SRCS "src/*.cpp")
pybind11_add_module(${target} ${SRCS})
target_link_libraries(${target} PRIVATE openblas)
set_target_properties(${target} PROPERTIES PREFIX "" LIBRARY_OUTPUT_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/../lib/")

