import plotly.plotly as py
from plotly.graph_objs import *
from plotly.offline import plot
import networkx as nx
from visualize_network import visualize_html
from utility import writedata,writecncfg,save_obj,load_obj,bits2nucleus,str2bits,bits2str,nucleus2bits,removeNucleusAtoms,getnbrlist,nbitsdiff,nbits1
from setget_db import select_atoms_within_ecllipse, select_totalatoms_on_slice, readnn, get_nbrlist, find_bdy_atoms, make_pairs, calculate_frk_energy, calculate_frk_energy, load_status_0, setget_db

'''
Generate a network using data base generated by global_search.py
'''
G=nx.Graph()

#dirname = '/home/xzhang11/Planet/Libs/MD++.git/runs/frankMEP/test_shortest_path_db_0.05/'
dirname = '/home/xzhang11/Planet/Libs/MD++.git/runs/frankMEP/test_db_0.05/'
#db1 = load_obj(dirname+'test_single_graph_db')
db1 = load_obj(dirname+'db_0.05')
#db = merge_obj(db1,db2)
db = db1

# Assign node ID
ID = { }
db_simple = { } 
id = 0;
min_energy = 1e5;
for key, val in db.iteritems():
    ID[key] = id
    id = id + 1
    if val < min_energy:
        min_energy = val
    db_simple[key] = val
#    if id == 100:
#        break

#db = db_simple
print("minimum energy of all data points is {0}".format(min_energy))
# Assign nodes to G
# G.add_nodes_from(list(db.keys()))

print("Size of nodes: {0}".format(len(list(db.keys()))))

# Assign edges to G
edges = []
id = 0
for key1, val1 in db.iteritems():
    for key2, val2 in db.iteritems():
	nbdf = nbitsdiff(str2bits(key1), str2bits(key2))
	#print('-----------------------------------------------------------')
	#print(nbdf)
	#print(str2bits(key1))
	#print(str2bits(key2))
	#print((key1))
	#print((key2))
	#print('**********************************************************')
        if  nbdf==2: # key1 and key2 are different by one digit
	    #edges.append((ID[key1], ID[key2], abs(0.5*(val1+val2 ))/abs(min_energy) ))
	    if (nbits1(str2bits(key1))< nbits1(str2bits(key2))):
#	        edges.append((ID[key1], ID[key2], abs(val1-val2) ))
		edges.append((ID[key1], ID[key2], (0.5*(2*abs(min_energy)+val1+val2 )) ))
	    else:
#                edges.append((ID[key2], ID[key1], abs(val1-val2) ))
		edges.append((ID[key2], ID[key1], (0.5*(2*abs(min_energy)+val1+val2 )) ))
#            print("success choose edge")
        else:
	    continue;
    print("id = {0}".format(id))
    id = id + 1

G.add_weighted_edges_from(edges)

# Print G to check
print(G.number_of_nodes())
print(G.number_of_edges())

#nx.write_gpickle(G, dirname+"test_single_graph_db.gpickle")
#G = nx.read_gpickle(dirname+"test_single_graph_db.gpickle")

nx.write_gpickle(G, dirname+"nx_graph.gpickle")
G = nx.read_gpickle(dirname+"nx_graph.gpickle")

#list(G.nodes)
#list(G.edges)

#visualize_html(G)

